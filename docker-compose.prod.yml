version: "3.9"

services:
  # Reverse proxy with SSL termination
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main application gateway
  gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.gateway
      target: runtime
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGENT_URL=http://agent:8001
      - ASSESSMENT_URL=http://assessment:8003
      - TEACHER_URL=http://teacher:8004
      - LITCOACH_TTS_MODEL=tts-1
      - LITCOACH_TRANSCRIBE_MODEL=whisper-1
      - GATEWAY_HOST=0.0.0.0
      - GATEWAY_PORT=8000
    volumes:
      - gateway_data:/app/data
      - gateway_logs:/app/logs
    depends_on:
      - agent
      - teacher
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Agent service with OpenAI integration
  agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
      target: runtime
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CONTENT_URL=http://content:8002
      - ASSESSMENT_URL=http://assessment:8003
      - LITCOACH_AGENT_MODEL=gpt-4o-mini
    volumes:
      - agent_data:/app/data
      - agent_logs:/app/logs
    depends_on:
      - content
      - assessment
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Content service with vector search
  content:
    build:
      context: .
      dockerfile: docker/Dockerfile.content
      target: runtime
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CONTENT_DB_PATH=/app/data/content.db
      - CONTENT_TEXTS_JSON=/app/data/texts/texts.json
      - LITCOACH_EMBED_MODEL=text-embedding-3-small
    volumes:
      - content_data:/app/data
      - content_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Assessment service
  assessment:
    build:
      context: .
      dockerfile: docker/Dockerfile.assessment
      target: runtime
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LITCOACH_AGENT_MODEL=gpt-4o-mini
    volumes:
      - assessment_data:/app/data
      - assessment_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Teacher API service
  teacher:
    build:
      context: .
      dockerfile: docker/Dockerfile.teacher
      target: runtime
    environment:
      - TEACHER_DB_PATH=/app/data/teacher.db
    volumes:
      - teacher_data:/app/data
      - teacher_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./docker/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  # Log shipping
  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./docker/promtail-config.yml:/etc/promtail/config.yml:ro
      - gateway_logs:/var/log/gateway:ro
      - agent_logs:/var/log/agent:ro
      - content_logs:/var/log/content:ro
      - assessment_logs:/var/log/assessment:ro
      - teacher_logs:/var/log/teacher:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped

volumes:
  # Application data
  gateway_data:
    driver: local
  gateway_logs:
    driver: local
  agent_data:
    driver: local
  agent_logs:
    driver: local
  content_data:
    driver: local
  content_logs:
    driver: local
  assessment_data:
    driver: local
  assessment_logs:
    driver: local
  teacher_data:
    driver: local
  teacher_logs:
    driver: local

  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: literacy-coach-prod
    driver: bridge